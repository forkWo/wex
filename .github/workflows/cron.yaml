name: Wex JSON Upload and Cleanup (Node.js)

on:
  push:
    branches:
      - wex
  workflow_dispatch:
  schedule:
    - cron: '*/40 * * * *' # 每 40 分钟触发一次

env:
  JSON_URL: "https://9280.kstore.space/wex.json"
  FINAL_JSON: "wex.json" # 最终文件命名为 wex.json

jobs:
  process_json:
    runs-on: ubuntu-latest

    steps:
      # 第一步：设置 Node.js 环境
      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # 使用 Node.js 18
          cache: 'npm' # 缓存 npm 依赖

      # 第二步：安装依赖
      - name: 安装依赖
        run: |
          npm install axios md5 jq -g
          npm install

      # 第三步：下载 JSON 文件
      - name: 下载 JSON 数据
        id: download_json
        run: |
          curl -s "${{ env.JSON_URL }}" -o 9280.json
          ORIGINAL_MD5=$(md5sum 9280.json | awk '{print $1}')
          echo "原始 JSON 文件的 MD5: $ORIGINAL_MD5"
          echo "ORIGINAL_MD5=$ORIGINAL_MD5" >> $GITHUB_ENV

      # 第四步：获取上一个 Releases 版本的 spider MD5
      - name: 获取上一个 Releases 版本的 spider MD5
        id: get_previous_spider_md5
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}  # 使用 PAT
        run: |
          node -e "
          const axios = require('axios');
          const { GITHUB_TOKEN, GITHUB_REPOSITORY } = process.env;

          axios.get('https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest', {
            headers: { Authorization: \`Bearer \${GITHUB_TOKEN}\` }
          })
            .then(response => {
              const body = response.data.body || '';
              const md5Match = body.match(/Spider MD5: ([0-9a-f]{32})/);
              if (md5Match) {
                console.log(\`提取的 MD5 值: \${md5Match[1]}\`);
                console.log(\`::set-env name=PREVIOUS_SPIDER_MD5::\${md5Match[1]}\`);
              } else {
                console.log('未找到 Spider MD5，跳过 MD5 对比。');
                console.log('::set-env name=PREVIOUS_SPIDER_MD5::no_releases');
              }
            })
            .catch(error => {
              if (error.response && error.response.status === 404) {
                console.log('仓库中没有 Releases，跳过 MD5 对比。');
                console.log('::set-env name=PREVIOUS_SPIDER_MD5::no_releases');
              } else {
                console.error('获取 Releases 失败:', error.message);
                process.exit(1);
              }
            });
          "

      # 第五步：对比 spider 字段
      - name: 对比 spider 字段
        id: compare_spider
        run: |
          CURRENT_SPIDER_MD5=$(node -e "
            const fs = require('fs');
            const md5 = require('md5');
            const data = JSON.parse(fs.readFileSync('9280.json', 'utf8'));
            console.log(md5(JSON.stringify(data.spider)));
          ")
          echo "当前 Spider 字段的 MD5: $CURRENT_SPIDER_MD5"

          if [[ "$CURRENT_SPIDER_MD5" != "$PREVIOUS_SPIDER_MD5" ]]; then
            echo "Spider 字段已修改，需要处理 JSON 文件。"
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "Spider 字段未修改，无需处理 JSON 文件。"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      # 第六步：修改 JSON 文件（仅在 changed 为 true 时执行）
      - name: 修改 JSON 文件
        if: steps.compare_spider.outputs.changed == 'true'
        run: |
          node -e "
          const fs = require('fs');
          const inputFile = '9280.json';
          const outputFile = process.env.FINAL_JSON;

          const keysToDelete = [
            'Doubana', 'Wexconfig', 'WexrenrenGuard', 'mingriyingshi', 'Fujutv', 'SubaibaiGuard', 'csp_Nmys',
            'Wexliyuan', 'Wextangdou', 'Wexergeduoduo', 'Wexbaobaobashi', 'Wexbeiwa', 'Wextuxiaobei', 'Pandalivetv',
            'Iktv', 'WexDm84', 'WexYsj', '自定义', 'AList', 'bili', 'biliych', 'Wexqingfengdj', 'Wexxsmp3', 'Wexpsmp3',
            'Wexwwe', '看球', '926看球', '1直播', 'Wexduanjuquark', 'Wexduanjuvop', 'Wexduanjuhema', 'WexduanjuvmpGuard',
            'Wexduanju001', '非凡', '木耳', '360', '爱坤', 'Wexyingchao', 'Wexalllive'
          ];

          const data = JSON.parse(fs.readFileSync(inputFile, 'utf8'));

          // 删除不需要的键
          if (data.doh) delete data.doh;
          if (data.lives) delete data.lives;

          // 修改特定键的名称
          data.sites.forEach(site => {
            if (site.key === 'Douban') site.name = '🐮【推荐】🐮';
            if (site.key === 'Wexokconfig') site.name = '🐮配置中心🐮';
            if (site.key === 'Wexnullname') site.name = '💓观影┃4K💓';
          });

          // 过滤掉不需要的站点
          data.sites = data.sites.filter(site => !keysToDelete.includes(site.key));

          // 保存修改后的 JSON 文件
          fs.writeFileSync(outputFile, JSON.stringify(data, null, 2), 'utf8');
          console.log(\`JSON 文件处理完成，保存为: \${outputFile}\`);
          "

      # 第七步：上传文件到 Kstore（仅在 changed 为 true 时执行）
      - name: 上传文件到 Kstore
        if: steps.compare_spider.outputs.changed == 'true'
        run: |
          curl https://upload.kstore.dev/upload/${{ secrets.KSTORE_ID }}?access_token=${{ secrets.KSTORE_TOKEN }} -F "file=@${{ env.FINAL_JSON }}"

      # 第八步：发布新的 Releases（仅在 changed 为 true 时执行）
      - name: 发布新的 Releases
        if: steps.compare_spider.outputs.changed == 'true'
        env:
          GH_TOKEN: ${{ secrets.PAT }}  # 使用 PAT
        run: |
          node -e "
          const { execSync } = require('child_process');
          const fs = require('fs');
          const md5 = require('md5');

          // 提取当前 Spider 字段的 MD5
          const data = JSON.parse(fs.readFileSync('9280.json', 'utf8'));
          const currentSpiderMD5 = md5(JSON.stringify(data.spider));

          // 发布新的 Releases
          const releaseName = \`v\${new Date().toISOString().replace(/[^0-9]/g, '')}\`;
          const releaseTitle = \`New Release \${new Date().toISOString().split('T')[0]}\`;
          const releaseNotes = \`Spider MD5: \${currentSpiderMD5}\`;

          execSync(\`gh release create \${releaseName} --title '\${releaseTitle}' --notes '\${releaseNotes}'\`, {
            stdio: 'inherit',
            env: { ...process.env, GH_TOKEN: process.env.GH_TOKEN }
          });
          "

      # 第九步：删除旧的工作流运行记录
      - name: 删除旧的工作流运行记录
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          node -e "
          const axios = require('axios');
          const { GH_TOKEN, GITHUB_REPOSITORY } = process.env;

          axios.get(\`https://api.github.com/repos/\${GITHUB_REPOSITORY}/actions/runs\`, {
            headers: { Authorization: \`Bearer \${GH_TOKEN}\` }
          })
            .then(response => {
              const runs = response.data.workflow_runs;
              runs.forEach(run => {
                if (run.status === 'completed') {
                  console.log(\`正在删除工作流运行记录: \${run.id}\`);
                  axios.delete(\`https://api.github.com/repos/\${GITHUB_REPOSITORY}/actions/runs/\${run.id}\`, {
                    headers: { Authorization: \`Bearer \${GH_TOKEN}\` }
                  });
                }
              });
            })
            .catch(error => {
              console.error('删除工作流运行记录失败:', error.message);
              process.exit(1);
            });
          "