name: Wex JSON Upload (Python)

on:
  push:
    branches:
      - wex
  workflow_dispatch:
  schedule:
    - cron: '0 */2 * * *' # 每两个小时触发一次

env:
  JSON_URL: "https://9280.kstore.space/wex.json"
  FINAL_JSON: "wex.json" # 最终文件命名为 wex.json

jobs:
  process_json:
    runs-on: ubuntu-latest

    steps:
      # 第一步：设置 Python 环境
      - name: 设置 Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      # 第二步：下载 JSON 文件
      - name: 下载 JSON 数据
        id: download_json
        run: |
          curl -s "${{ env.JSON_URL }}" -o 9280.json
          ORIGINAL_MD5=$(md5sum 9280.json | awk '{print $1}')
          echo "原始 JSON 文件的 MD5: $ORIGINAL_MD5"
          echo "ORIGINAL_MD5=$ORIGINAL_MD5" >> $GITHUB_ENV

      # 第三步：运行 Python 脚本处理 JSON 数据
      - name: 运行 Python 脚本处理 JSON
        id: modify_json
        run: |
          python3 <<EOF
          import json
          import hashlib

          # 输入和输出文件路径
          input_file = "9280.json"
          output_file = "${{ env.FINAL_JSON }}"

          # 需要删除的键列表
          keys_to_delete = [
              "Doubana", "Wexconfig", "WexrenrenGuard", "mingriyingshi", "Fujutv", "SubaibaiGuard", "csp_Nmys",
              "Wexliyuan", "Wextangdou", "Wexergeduoduo", "Wexbaobaobashi", "Wexbeiwa", "Wextuxiaobei", "Pandalivetv",
              "Iktv", "WexDm84", "WexYsj", "自定义", "AList", "bili", "biliych", "Wexqingfengdj", "Wexxsmp3", "Wexpsmp3",
              "Wexwwe", "看球", "926看球", "1直播", "Wexduanjuquark", "Wexduanjuvop", "Wexduanjuhema", "WexduanjuvmpGuard",
              "Wexduanju001", "非凡", "木耳", "360", "爱坤"
          ]

          # 读取原始 JSON 文件
          with open(input_file, "r", encoding="utf-8") as f:
              data = json.load(f)

          # 删除不需要的键
          if "doh" in data:
              del data["doh"]
          if "lives" in data:
              del data["lives"]

          # 修改特定键的名称
          for site in data.get("sites", []):
              if site.get("key") == "Douban":
                  site["name"] = "🐮【推荐】🐮"
              elif site.get("key") == "Wexokconfig":
                  site["name"] = "🐮配置中心🐮"
              elif site.get("key") == "Wexnullname":
                  site["name"] = "💓观影┃4K💓"

          # 过滤掉不需要的站点
          data["sites"] = [site for site in data.get("sites", []) if site.get("key") not in keys_to_delete]

          # 保存修改后的 JSON 文件
          with open(output_file, "w", encoding="utf-8") as f:
              json.dump(data, f, ensure_ascii=False, indent=2)

          print("JSON 文件处理完成，保存为:", output_file)

          # 提取 spider 字段内容并计算 MD5
          spider_content = json.dumps(data.get("spider", {}), ensure_ascii=False, indent=2)
          spider_md5 = hashlib.md5(spider_content.encode("utf-8")).hexdigest()
          with open("spider_content.txt", "w", encoding="utf-8") as f:
              f.write(spider_content)
          with open("spider_md5.txt", "w", encoding="utf-8") as f:
              f.write(spider_md5)
          EOF

      # 第四步：读取 spider 字段的 MD5 和内容
      - name: 读取 spider 字段的 MD5 和内容
        id: read_spider
        run: |
          SPIDER_MD5=$(cat spider_md5.txt)
          SPIDER_CONTENT=$(cat spider_content.txt)
          echo "当前 spider 字段的 MD5: $SPIDER_MD5"
          echo "SPIDER_MD5=$SPIDER_MD5" >> $GITHUB_ENV
          echo "SPIDER_CONTENT<<EOF" >> $GITHUB_ENV
          echo "$SPIDER_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # 第五步：对比 spider 字段的 MD5
      - name: 对比 spider 字段的 MD5
        id: compare_spider_md5
        run: |
          # 获取上一次的 spider 字段 MD5（假设保存在环境变量中）
          if [[ -f "last_spider_md5.txt" ]]; then
              LAST_SPIDER_MD5=$(cat last_spider_md5.txt)
              echo "上一次 spider 字段的 MD5: $LAST_SPIDER_MD5"
          else
              LAST_SPIDER_MD5=""
              echo "未找到上一次的 spider 字段 MD5。"
          fi

          # 对比 MD5
          if [[ "$SPIDER_MD5" != "$LAST_SPIDER_MD5" ]]; then
              echo "spider 字段已修改。"
              echo "spider_changed=true" >> $GITHUB_OUTPUT
              echo "$SPIDER_MD5" > last_spider_md5.txt
          else
              echo "spider 字段未修改，无需上传和发布。"
              echo "spider_changed=false" >> $GITHUB_OUTPUT
          fi

      # 第六步：上传文件到 Kstore（仅在 spider_changed 为 true 时执行）
      - name: 上传文件到 Kstore
        if: steps.compare_spider_md5.outputs.spider_changed == 'true'
        run: |
          curl https://upload.kstore.dev/upload/${{ secrets.KSTORE_ID }}?access_token=${{ secrets.KSTORE_TOKEN }} -F "file=@${{ env.FINAL_JSON }}"

      # 第七步：发布 Releases（仅在 spider_changed 为 true 时执行）
      - name: 发布 Releases
        if: steps.compare_spider_md5.outputs.spider_changed == 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.0
          release_name: Release v1.0.0
          body: |
            Spider 字段内容已更新，内容如下：
            ```
            ${{ env.SPIDER_CONTENT }}
            ```
          draft: false
          prerelease: false