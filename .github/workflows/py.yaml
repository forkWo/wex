name: Wex JSON Upload

on:
  push:
    branches:
      - wex
  workflow_dispatch:
  schedule:
    - cron: '*/10 * * * *'

env:
  JSON_URL: "https://9280.kstore.space/wex.json"
  FINAL_JSON: "wex.json"

jobs:
  modify:
    runs-on: ubuntu-latest
    steps:
      - name: 设置 Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: 安装依赖
        run: sudo apt-get install -y jq

      - name: 下载 JSON 数据
        run: curl -s "${{ env.JSON_URL }}" -o 9280.json

      - name: 提取 Spider 内容
        id: spider
        run: |
          SPIDER_CONTENT=$(jq -r '.spider' 9280.json | sed 's/\\n/\\\\n/g')
          echo "SPIDER_CONTENT<<EOF" >> $GITHUB_ENV
          echo -e "$SPIDER_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: 获取历史 Spider
        id: history
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          RESP=$(curl -sf -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest")

          if [[ $(jq -r '.message' <<< "$RESP") == "Not Found" ]]; then
            echo "PREVIOUS_SPIDER=no_history" >> $GITHUB_ENV
          else
            BODY=$(jq -r '.body' <<< "$RESP")
            echo -e "PREVIOUS_SPIDER=$(awk '/Spider Content: /{sub(/.*: /, ""); print}' <<< "$BODY")" >> $GITHUB_ENV
          fi

      - name: 对比内容
        id: comparator
        run: |
          if [[ "$SPIDER_CONTENT" != "$PREVIOUS_SPIDER" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: 处理 JSON
        if: steps.comparator.outputs.changed == 'true'
        run: |
          python3 <<EOF
          import json
          import hashlib

          # 输入和输出文件路径
          input_file = "9280.json"
          output_file = "${{ env.FINAL_JSON }}"

          # 需要删除的键列表
          keys_to_delete = [
              "Doubana", #⬇️【网盘类先扫码】⬇️
              "Wexconfig", #🐮通用类型┃配置中心🐮
              "Wexalllive", #💓‍聚合┃直播💓
              "mingriyingshi", #😁明日┃影视😁
              "Fujutv", #😁腐剧┃影视😁
              "Wexsaohuo", #🎇火火┃秒播🎇
              "csp_Nmys", #🎇伯伯┃秒播🎇
              "非凡","木耳", 
              "360", "爱坤", 
              "Wexhanxiaoquan", #🌺韩圈┃秒播🌺
              "Wexduanjuquark", #🍉短剧┃夸克🍉
              "Wexduanjuvop", #🍉短剧┃秒播🍉
              "Wexduanjuhema", #🍉短剧┃仙品🍉
              "WexduanjuvmpGuard", #🍉短剧┃帝品🍉
              "WexduanjuvipGuard", #🍉短剧┃神品🍉
              "Wexduanju001", #🍉短剧┃极品🍉
              "Wexliyuan", #🎎戏曲┃秒播🎎
              "Wextangdou", #💃跳舞┃教学💃
              "Wexergeduoduo", #👼多多┃儿歌👼
              "Wexbaobaobashi", #👼宝宝┃儿歌👼
              "Wexbeiwa", #👼贝贝┃儿歌👼
              "Wextuxiaobei", #👼兔兔┃儿歌👼
              "Pandalivetv", #😍韩国┃直播😍
              "Iktv", "自定义", 
              "AList","bili",
              "biliych", #🅱哔哔┃歌曲🅱
              "Wexqingfengdj", #🎼舞曲┃摇头🎼
              "Wexxsmp3", #🎤随身┃相声🎤
              "Wexpsmp3", #🎤随身┃评书🎤
              "Wexwwe", #🌐格斗┃WWE🌐
              "看球", 
              "926看球", 
              "1直播",
          ]

          # 读取原始 JSON 文件
          with open(input_file, "r", encoding="utf-8") as f:
              data = json.load(f)

          # 删除不需要的键
          if "doh" in data:
              del data["doh"]
          if "lives" in data:
              del data["lives"]

          # 修改特定键的名称
          for site in data.get("sites", []):
              if site.get("key") == "Douban":
                  site["name"] = "🐮【推荐】🐮"
              elif site.get("key") == "Wexokconfig":
                  site["name"] = "🐮配置中心🐮"
              elif site.get("key") == "Wexnullname":
                  site["name"] = "💓观影┃4K💓"

          # 过滤掉不需要的站点
          data["sites"] = [site for site in data.get("sites", []) if site.get("key") not in keys_to_delete]

          # 重新排序 sites 数组，将 "玩偶" 放在 "Wexokconfig" 后面
          def sort_sites(site):
              if site.get("key") == "Douban":
                  return 1
              elif site.get("key") == "Wexokconfig":
                  return 2
              elif site.get("key") == "玩偶":
                  return 3
              else:
                  return 4

          data["sites"].sort(key=sort_sites)

          # 保存修改后的 JSON 文件
          with open(output_file, "w", encoding="utf-8") as f:
              json.dump(data, f, ensure_ascii=False, indent=2)

          print("JSON 文件处理完成，保存为:", output_file)
          EOF

      - name: 上传文件
        if: steps.comparator.outputs.changed == 'true'
        run: |
          curl -sSf -o /dev/null \
            https://upload.kstore.dev/upload/${{ secrets.KSTORE_ID }}?access_token=${{ secrets.KSTORE_TOKEN }} \
            -F "file=@${{ env.FINAL_JSON }}"

      - name: 发布版本
        if: steps.comparator.outputs.changed == 'true'
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          gh release create v$(date +%s) \
            --title "Auto-Release $(date +%F)" \
            --notes "Spider Content: $SPIDER_CONTENT"

      - name: 清理历史
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RUNS=$(curl -sf -H "Authorization: Bearer $GH_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?per_page=100")
          
          jq -r '.workflow_runs | sort_by(.run_number) | reverse | .[5:][] | .id' <<< "$RUNS" | \
            xargs -I{} curl -sf -X DELETE -H "Authorization: Bearer $GH_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/{}"