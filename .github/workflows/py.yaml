name: Wex JSON Upload and Cleanup (Optimized)

on:
  push:
    branches:
      - wex
  workflow_dispatch:
  schedule:
    - cron: '*/40 * * * *' # 每 40 分钟触发一次

env:
  JSON_URL: "https://9280.kstore.space/wex.json"
  FINAL_JSON: "wex.json" # 最终文件命名为 wex.json

jobs:
  process_json:
    runs-on: ubuntu-latest

    steps:
      # 第一步：设置 Python 环境
      - name: 设置 Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      # 第二步：安装 jq 工具
      - name: 安装 jq
        run: sudo apt-get install -y jq

      # 第三步：下载 JSON 文件
      - name: 下载 JSON 数据
        id: download_json
        run: |
          curl -s "${{ env.JSON_URL }}" -o 9280.json
          ORIGINAL_MD5=$(md5sum 9280.json | awk '{print $1}')
          echo "原始 JSON 文件的 MD5: $ORIGINAL_MD5"
          echo "ORIGINAL_MD5=$ORIGINAL_MD5" >> $GITHUB_ENV

      # 第四步：获取上一个 Releases 版本的 spider MD5
      - name: 获取上一个 Releases 版本的 spider MD5
        id: get_previous_spider_md5
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}  # 使用 PAT
        run: |
          LATEST_RELEASE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/repos/${{ github.repository }}/releases/latest)
          echo "GitHub API 响应: $LATEST_RELEASE"  # 调试输出

          # 检查是否有 Releases
          if [[ $(echo "$LATEST_RELEASE" | jq -r '.message') == "Not Found" ]]; then
            echo "仓库中没有 Releases，跳过 MD5 对比。"
            echo "PREVIOUS_SPIDER_MD5=no_releases" >> $GITHUB_ENV
          else
            # 提取 body 内容
            BODY=$(echo "$LATEST_RELEASE" | jq -r '.body')
            echo "body 内容: $BODY"  # 调试输出

            # 提取 MD5 值
            PREVIOUS_SPIDER_MD5=$(echo "$BODY" | grep -oP 'Spider MD5: \K[0-9a-f]{32}')
            echo "提取的 MD5 值: $PREVIOUS_SPIDER_MD5"  # 调试输出

            # 将 MD5 值写入环境变量
            echo "PREVIOUS_SPIDER_MD5=$PREVIOUS_SPIDER_MD5" >> $GITHUB_ENV
          fi

      # 第五步：对比 spider 字段
      - name: 对比 spider 字段
        id: compare_spider
        run: |
          CURRENT_SPIDER_MD5=$(md5sum <<< $(jq -r '.spider' 9280.json) | awk '{print $1}')
          echo "当前 Spider 字段的 MD5: $CURRENT_SPIDER_MD5"

          if [[ "$CURRENT_SPIDER_MD5" != "$PREVIOUS_SPIDER_MD5" ]]; then
            echo "Spider 字段已修改，需要处理 JSON 文件。"
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "Spider 字段未修改，无需处理 JSON 文件。"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      # 第六步：修改 JSON 文件（仅在 changed 为 true 时执行）
      - name: 修改 JSON 文件
        if: steps.compare_spider.outputs.changed == 'true'
        run: |
          python3 <<EOF
          import json
          import hashlib

          # 输入和输出文件路径
          input_file = "9280.json"
          output_file = "${{ env.FINAL_JSON }}"

          # 需要删除的键列表
          keys_to_delete = [
              "Doubana", "Wexconfig", "WexrenrenGuard", "mingriyingshi", "Fujutv", "SubaibaiGuard", "csp_Nmys",
              "Wexliyuan", "Wextangdou", "Wexergeduoduo", "Wexbaobaobashi", "Wexbeiwa", "Wextuxiaobei", "Pandalivetv",
              "Iktv", "WexDm84", "WexYsj", "自定义", "AList", "bili", "biliych", "Wexqingfengdj", "Wexxsmp3", "Wexpsmp3",
              "Wexwwe", "看球", "926看球", "1直播", "Wexduanjuquark", "Wexduanjuvop", "Wexduanjuhema", "WexduanjuvmpGuard",
              "Wexduanju001", "非凡", "木耳", "360", "爱坤", "Wexyingchao", "Wexalllive"
          ]

          # 读取原始 JSON 文件
          with open(input_file, "r", encoding="utf-8") as f:
              data = json.load(f)

          # 删除不需要的键
          if "doh" in data:
              del data["doh"]
          if "lives" in data:
              del data["lives"]

          # 修改特定键的名称
          for site in data.get("sites", []):
              if site.get("key") == "Douban":
                  site["name"] = "🐮【推荐】🐮"
              elif site.get("key") == "Wexokconfig":
                  site["name"] = "🐮配置中心🐮"
              elif site.get("key") == "Wexnullname":
                  site["name"] = "💓观影┃4K💓"

          # 过滤掉不需要的站点
          data["sites"] = [site for site in data.get("sites", []) if site.get("key") not in keys_to_delete]

          # 保存修改后的 JSON 文件
          with open(output_file, "w", encoding="utf-8") as f:
              json.dump(data, f, ensure_ascii=False, indent=2)

          print("JSON 文件处理完成，保存为:", output_file)
          EOF

      # 第七步：上传文件到 Kstore（仅在 changed 为 true 时执行）
      - name: 上传文件到 Kstore
        if: steps.compare_spider.outputs.changed == 'true'
        run: |
          curl https://upload.kstore.dev/upload/${{ secrets.KSTORE_ID }}?access_token=${{ secrets.KSTORE_TOKEN }} -F "file=@${{ env.FINAL_JSON }}"

      # 第八步：发布新的 Releases（仅在 changed 为 true 时执行）
      - name: 发布新的 Releases
        if: steps.compare_spider.outputs.changed == 'true'
        env:
          GH_TOKEN: ${{ secrets.PAT }}  # 使用 PAT
        run: |
          # 切换到 GitHub Actions 的默认工作目录
          cd $GITHUB_WORKSPACE

          # 检查当前目录是否是 Git 仓库
          if ! git rev-parse --git-dir > /dev/null 2>&1; then
            echo "当前目录不是 Git 仓库，正在初始化 Git 仓库..."
            git init
            git remote add origin https://github.com/${{ github.repository }}.git
          fi

          # 提取当前 Spider 字段的 MD5
          CURRENT_SPIDER_MD5=$(md5sum <<< $(jq -r '.spider' 9280.json) | awk '{print $1}')

          # 发布新的 Releases
          gh release create v$(date +%Y%m%d%H%M%S) --title "New Release $(date +%Y-%m-%d)" --notes "Spider MD5: $CURRENT_SPIDER_MD5"

      # 第九步：删除旧的工作流运行记录
      - name: 删除旧的工作流运行记录
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 获取工作流运行记录
          RUNS=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?per_page=1400")

          # 提取需要删除的运行记录 ID
          OLD_RUN_IDS=$(echo "$RUNS" | jq -r '.workflow_runs[] | select(.status == "completed") | .id')

          # 删除旧的工作流运行记录
          for RUN_ID in $OLD_RUN_IDS; do
            echo "正在删除工作流运行记录: $RUN_ID"
            curl -s -X DELETE -H "Authorization: Bearer $GH_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/$RUN_ID"
          done