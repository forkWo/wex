name: 更新 Spider 和 Sites

on:
  push:
    branches:
      - main
  workflow_dispatch:  # 手动触发
  schedule:
    - cron: '0 */1 * * *'  # 每小时执行一次

jobs:
  update-spider-and-sites:
    runs-on: ubuntu-latest

    steps:
      # Step 0: Delete previous runs
      - name: 删除任务流
        env:
          PAT: ${{ secrets.PAT }}
        run: |
          runs_to_delete=$(curl -s -H "Authorization: token $PAT" \
            https://api.github.com/repos/${{ github.repository }}/actions/runs?branch=${{ github.ref_name }} \
            | jq -r '.workflow_runs | map(select(.status == "completed")) | .[23:] | .[].id')

          for run_id in $runs_to_delete; do
            echo "Deleting run $run_id"
            curl -X DELETE -H "Authorization: token $PAT" \
            https://api.github.com/repos/${{ github.repository }}/actions/runs/$run_id
          done

      # Step 1: Checkout the repository
      - name: 查看 repository
        uses: actions/checkout@v2

      # Step 2: Setup Python
      - name: 设置 Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Step 3: Install necessary dependencies
      - name: 安装 Dependencies
        run: python -m pip install requests

      # Step 4: Get Spider and Sites URLs and set environment variables
      - name: 获取 Spider 和 Sites 字段
        run: |
          SPIDER_URL=$(python -c "import requests; print(requests.get('https://9280.kstore.space/wex.json').json()['spider'])")
          NEW_SITES_URLS=$(python -c "import requests; print([site['url'] for site in requests.get('https://9280.kstore.space/wex.json').json().get('sites', []) if 'url' in site])")
          echo "SPIDER_URL=$SPIDER_URL" >> $GITHUB_ENV
          echo "NEW_SITES_URLS=$NEW_SITES_URLS" >> $GITHUB_ENV

      # Step 5: Compare Spider URL
      - name: 对比 Spider URL
        id: compare-spider
        env:
          SPIDER_JSON: ${{ secrets.SPIDER_JSON }}
        run: |
          response=$(curl -s ${{ env.SPIDER_JSON }})
          echo "Response Content: $response"
          EXISTING_SPIDER_URL=$(python -c "import sys, json
        try:
            data = json.loads('$response')
            print(data['spider'].strip())
        except json.JSONDecodeError as e:
            print(f'JSON decode error: {e}', file=sys.stderr)
            sys.exit(1)
        except KeyError:
            print('Key \"spider\" not found in JSON', file=sys.stderr)
            sys.exit(1)
        ")
          
          SPIDER_URL=$(echo $SPIDER_URL | tr -d '\n' | tr -d ' ')
          EXISTING_SPIDER_URL=$(echo $EXISTING_SPIDER_URL | tr -d '\n' | tr -d ' ')
          
          echo "New SPIDER_URL: $SPIDER_URL"
          echo "Existing SPIDER_URL: $EXISTING_SPIDER_URL"
          
          if [ "$SPIDER_URL" = "$EXISTING_SPIDER_URL" ]; then
            echo "continue_spider=false" >> $GITHUB_ENV
            echo "Spider URL 一致。"
          else
            echo "continue_spider=true" >> $GITHUB_ENV
            echo "Spider URL 不一致。"
          fi

      # Step 6: Compare and combine Sites URLs
      - name: 合并 Sites URL
        id: merge-sites
        env:
          SPIDER_JSON: ${{ secrets.SPIDER_JSON }}
        run: |
          EXISTING_SITES_URLS=$(python -c "import requests; print([site['url'] for site in requests.get('${SPIDER_JSON}').json().get('sites', []) if 'url' in site])")
          NEW_SITES_URLS=$(python -c "import json; print(json.loads('$NEW_SITES_URLS'))")
          
          # Find new URLs not in existing list
          ADDED_SITES_URLS=$(python -c "print([url for url in $NEW_SITES_URLS if url not in $EXISTING_SITES_URLS])")
          
          echo "Added SITES_URLS: $ADDED_SITES_URLS"
          echo "ADDED_SITES_URLS=$ADDED_SITES_URLS" >> $GITHUB_ENV

          if [ "$ADDED_SITES_URLS" = "[]" ]; then
            echo "continue_sites=false" >> $GITHUB_ENV
            echo "Sites URL 一致。"
          else
            echo "continue_sites=true" >> $GITHUB_ENV
            echo "Sites URL 不一致。"
          fi

      # Step 7: Update Spider URL if different
      - name: 更新 Spider URL
        if: env.continue_spider == 'true' && env.continue_sites == 'false'
        env:
          KSTORE_TOKEN: ${{ secrets.KSTORE_TOKEN }}
          KSTORE_TOKEN2: ${{ secrets.KSTORE_TOKEN2 }}
          KSTORE_ID: ${{ secrets.KSTORE_ID }}
          WEX_JSON: ${{ secrets.WEX_JSON }}
        run: |
          response=$(curl -s ${{ env.WEX_JSON }})
          updated_data=$(echo "$response" | python -c "
            import sys, json; 
            data = json.load(sys.stdin); 
            data['spider'] = '${SPIDER_URL}'; 
            print(json.dumps(data, ensure_ascii=False))")
            
          cd ${{ github.workspace }}
          echo "$updated_data" > spider.json
          curl -F "file=@spider.json" "https://upload.kstore.space/upload/${{ env.KSTORE_ID }}?access_token=${{ env.KSTORE_TOKEN2 }}"
          echo "$updated_data" > wex.json
          curl -F "file=@wex.json" "https://upload.kstore.space/upload/${{ env.KSTORE_ID }}?access_token=${{ env.KSTORE_TOKEN }}"

      # Step 8: Update Sites and Spider URLs if Sites are different
      - name: 更新 Sites 和 Spider URL
        if: env.continue_sites == 'true'
        env:
          KSTORE_TOKEN: ${{ secrets.KSTORE_TOKEN }}
          KSTORE_TOKEN2: ${{ secrets.KSTORE_TOKEN2 }}
          KSTORE_ID: ${{ secrets.KSTORE_ID }}
          WEX_JSON: ${{ secrets.WEX_JSON }}
        run: |
          response=$(curl -s ${{ env.WEX_JSON }})
          updated_data=$(echo "$response" | python -c "
            import sys, json; 
            data = json.load(sys.stdin); 
            data['spider'] = '${SPIDER_URL}'; 
            added_urls = json.loads('$ADDED_SITES_URLS'); 
            existing_urls = [site['url'] for site in data.get('sites', [])];
            combined_urls = existing_urls + added_urls;
            data['sites'] = [{'url': url} for url in combined_urls]; 
            print(json.dumps(data, ensure_ascii=False))")
            
          cd ${{ github.workspace }}
          echo "$updated_data" > spider.json
          curl -F "file=@spider.json" "https://upload.kstore.space/upload/${{ env.KSTORE_ID }}?access_token=${{ env.KSTORE_TOKEN2 }}"
          echo "$updated_data" > wex.json
          curl -F "file=@wex.json" "https://upload.kstore.space/upload/${{ env.KSTORE_ID }}?access_token=${{ env.KSTORE_TOKEN }}"
